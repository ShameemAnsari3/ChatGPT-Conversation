me -----------------------
1. Book Finder User Persona: ● Name: Alex ● Occupation: College Student ● 
Need: Alex wants to search books (use your imagination of all the ways Alex would like to do it).
Task: ● Build an application for Alex. Do as good a job you can. API to Use: Open Library Search API: 
example ( know that it gives a lot of details,
including the cover):: https://openlibrary.org/search.json?title={bookTitle} 
Debounced search Instead of hitting the API on every form submit, you could debounce search input so results
update as the user types.

ChatGPT -------------------

User Persona

Name: Alex

Occupation: College Student

Needs:

Search books easily by title, author, subject, or ISBN

Quickly preview book covers and essential details

Dive deeper into details (description, subjects, editions)

Save favorite books for later reference

Accessible, smooth, and responsive experience

src/App.jsx
import React, { useState, useEffect } from "react";
import Header from "./components/Header";
import SearchForm from "./components/SearchForm";
import BookCard from "./components/BookCard";
import Favorites from "./components/Favorites";
import Footer from "./components/Footer";

const App = () => {
  const [searchType, setSearchType] = useState("title");
  const [query, setQuery] = useState("");
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [hasSearched, setHasSearched] = useState(false);
  const [networkStatus, setNetworkStatus] = useState(navigator.onLine);
  const [page, setPage] = useState(1);
  const [favorites, setFavorites] = useState([]);

  // Load favorites from localStorage
  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem("favorites")) || [];
    setFavorites(saved);
  }, []);

  // Save favorites to localStorage
  useEffect(() => {
    localStorage.setItem("favorites", JSON.stringify(favorites));
  }, [favorites]);

  // Network status listener
  useEffect(() => {
    const handleOnline = () => setNetworkStatus(true);
    const handleOffline = () => setNetworkStatus(false);
    window.addEventListener("online", handleOnline);
    window.addEventListener("offline", handleOffline);
    return () => {
      window.removeEventListener("online", handleOnline);
      window.removeEventListener("offline", handleOffline);
    };
  }, []);

  // Fetch books from OpenLibrary API
  const fetchBooks = async (reset = false) => {
    if (!query.trim()) return;
    if (!networkStatus) {
      setError("You are offline. Please check your internet connection.");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      let apiUrl = `https://openlibrary.org/search.json?${searchType}=${encodeURIComponent(
        query
      )}&page=${page}`;
      const response = await fetch(apiUrl);
      if (!response.ok) throw new Error(`Error: ${response.statusText}`);

      const data = await response.json();
      if (!data.docs || data.docs.length === 0) {
        if (reset) setBooks([]);
        setError(`No books found for "${query}".`);
      } else {
        setBooks((prev) =>
          reset ? data.docs.slice(0, 20) : [...prev, ...data.docs.slice(0, 20)]
        );
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const searchBooks = (e) => {
    e.preventDefault();
    setHasSearched(true);
    setPage(1);
    fetchBooks(true);
  };

  const loadMore = () => setPage((prev) => prev + 1);

  useEffect(() => {
    if (page > 1) fetchBooks();
  }, [page]);

  const clearSearch = () => {
    setQuery("");
    setBooks([]);
    setHasSearched(false);
    setError(null);
    setPage(1);
  };

  // Favorites handler
  const toggleFavorite = (book) => {
    if (favorites.some((fav) => fav.key === book.key)) {
      setFavorites(favorites.filter((fav) => fav.key !== book.key));
    } else {
      setFavorites([...favorites, book]);
    }
  };

  const isFavorite = (book) => favorites.some((fav) => fav.key === book.key);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col">
      <Header />

      <main className="container mx-auto px-4 py-8 flex-grow">
        {!networkStatus && (
          <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
            <i className="fas fa-wifi-slash mr-2"></i>You are offline.
          </div>
        )}

        {/* Search Form */}
        <SearchForm
          searchType={searchType}
          setSearchType={setSearchType}
          query={query}
          setQuery={setQuery}
          loading={loading}
          searchBooks={searchBooks}
          clearSearch={clearSearch}
          hasSearched={hasSearched}
        />

        {/* Results */}
        {error && <div className="bg-red-50 p-4 rounded-lg mb-6">{error}</div>}

        {books.length > 0 && (
          <>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-semibold text-gray-800">
                Search Results
              </h2>
              <p className="text-gray-600">{books.length} books found</p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {books.map((book) => (
                <BookCard
                  key={book.key}
                  book={book}
                  isFavorite={isFavorite(book)}
                  toggleFavorite={toggleFavorite}
                />
              ))}
            </div>
            <div className="flex justify-center mt-8">
              <button
                onClick={loadMore}
                disabled={loading}
                className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700"
              >
                {loading ? "Loading..." : "Load More"}
              </button>
            </div>
          </>
        )}

        {/* Favorites */}
        {favorites.length > 0 && (
          <Favorites favorites={favorites} toggleFavorite={toggleFavorite} />
        )}
      </main>

      <Footer />
    </div>
  );
};

export default App;


-----------------------

Header.jsx

const Header = () => (
  <header className="bg-white shadow-md">
    <div className="container mx-auto px-4 py-6 flex flex-col md:flex-row md:justify-between md:items-center">
      <h1 className="text-3xl font-bold text-indigo-700 mb-4 md:mb-0">
        <i className="fas fa-book mr-2"></i>BookFinder
      </h1>
      <p className="text-gray-600">
        Hello Alex! Find and save your favorite books...
      </p>
    </div>
  </header>
);

export default Header;


----------------------


SearchForm.jsx
const SearchForm = ({
  searchType,
  setSearchType,
  query,
  setQuery,
  loading,
  searchBooks,
  clearSearch,
  hasSearched,
}) => (
  <section className="bg-white rounded-xl shadow-lg p-6 mb-8">
    <form onSubmit={searchBooks} className="mb-6">
      <div className="flex flex-col md:flex-row gap-4 mb-6">
        {/* Search Type */}
        <div className="w-full md:w-1/4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Search by
          </label>
          <div className="flex space-x-2 bg-gray-100 p-1 rounded-lg">
            {["title", "author", "subject"].map((type) => (
              <button
                key={type}
                type="button"
                className={`flex-1 py-2 px-3 rounded-md text-sm font-medium ${
                  searchType === type
                    ? "bg-white text-indigo-700 shadow-sm"
                    : "text-gray-600 hover:text-gray-800"
                }`}
                onClick={() => setSearchType(type)}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
              </button>
            ))}
          </div>
        </div>

        {/* Input */}
        <div className="w-full md:w-2/4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {searchType === "title"
              ? "Book Title"
              : searchType === "author"
              ? "Author Name"
              : "Subject or Genre"}
          </label>
          <input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder={`Enter ${searchType}...`}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
          />
        </div>

        {/* Button */}
        <div className="w-full md:w-1/4 flex items-end">
          <button
            type="submit"
            disabled={loading || !query.trim()}
            className="w-full bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 disabled:opacity-50"
          >
            {loading ? "Searching..." : "Find Books"}
          </button>
        </div>
      </div>
      {hasSearched && (
        <div className="flex justify-end">
          <button
            type="button"
            onClick={clearSearch}
            className="text-sm text-gray-600 hover:text-gray-800"
          >
            <i className="fas fa-times mr-1"></i> Clear search
          </button>
        </div>
      )}
    </form>
  </section>
);

export default SearchForm;

---------------

me 

Book Details Missing

when clicking "View Details".

Displays extended info:

Description

Subjects/Genres

Number of editions

First publish year 

fix this issue



ChatGPT

-----------------
const BookCard = ({ book, isFavorite, toggleFavorite }) => (
  <div className="bg-white rounded-lg shadow-md overflow-hidden relative">
    {/* Favorite Button */}
    <button
      onClick={() => toggleFavorite(book)}
      className="absolute top-2 right-2 text-xl"
      aria-label="Toggle Favorite"
    >
      <i
        className={`fas fa-heart ${
          isFavorite ? "text-red-500" : "text-gray-300 hover:text-red-400"
        }`}
      ></i>
    </button>

    {/* Book Cover */}
    <div className="h-48 bg-gray-200 flex items-center justify-center">
      {book.cover_i ? (
        <img
          src={`https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg`}
          alt={book.title}
          className="h-full w-full object-cover"
        />
      ) : (
        <div className="text-gray-500 flex flex-col items-center">
          <i className="fas fa-book-open text-3xl mb-1"></i>
          <p className="text-xs">No cover</p>
        </div>
      )}
    </div>

    {/* Info */}
    <div className="p-4">
      <h3 className="font-semibold text-lg mb-1 line-clamp-1">
        {book.title}
      </h3>
      <p className="text-gray-600 mb-2">
        {book.author_name?.join(", ") || "Unknown Author"}
      </p>
      <p className="text-sm text-gray-500">
        Published: {book.first_publish_year || "Unknown"}
      </p>
    </div>
  </div>
);

export default BookCard;


------------------

Favorites.jsx

const Favorites = ({ favorites, toggleFavorite }) => (
  <section className="mt-12">
    <h2 className="text-2xl font-semibold text-gray-800 mb-6">
      Favorites ❤️
    </h2>
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {favorites.map((book) => (
        <div
          key={book.key}
          className="bg-white rounded-lg shadow-md overflow-hidden relative"
        >
          <button
            onClick={() => toggleFavorite(book)}
            className="absolute top-2 right-2 text-xl text-red-500"
            aria-label="Remove from Favorites"
          >
            <i className="fas fa-times"></i>
          </button>
          <div className="h-48 bg-gray-200 flex items-center justify-center">
            {book.cover_i ? (
              <img
                src={`https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg`}
                alt={book.title}
                className="h-full w-full object-cover"
              />
            ) : (
              <div className="text-gray-500 flex flex-col items-center">
                <i className="fas fa-book-open text-3xl mb-1"></i>
                <p className="text-xs">No cover</p>
              </div>
            )}
          </div>
          <div className="p-4">
            <h3 className="font-semibold text-lg mb-1 line-clamp-1">
              {book.title}
            </h3>
            <p className="text-gray-600 mb-2">
              {book.author_name?.join(", ") || "Unknown Author"}
            </p>
          </div>
        </div>
      ))}
    </div>
  </section>
);

export default Favorites;



--------------------

Footer.jsx

const Footer = () => (
  <footer className="bg-gray-800 text-white py-8 mt-12">
    <div className="container mx-auto px-4 text-center">
      <p>BookFinder - SHAMEEM ANSARI</p>
      <p className="text-gray-400 text-sm mt-2">
        Powered by Open Library API
      </p>
    </div>
  </footer>
);

export default Footer;

------------------------------

me 

when click clear all not working 
fix it






